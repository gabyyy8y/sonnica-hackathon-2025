1) Plugin: SonNica Register API
<?php
/**
 * Plugin Name: SonNica Register API
 * Description: Endpoints REST para registro/login/guest y manejo de sesión (autologin). Crea una tabla espejo wp_sonnica_users.
 * Version:     1.0.0
 * Author:      SonNica
 */

if (!defined('ABSPATH')) exit;

class SonNica_Register_API {
    const VERSION = '1.0.0';
    const TABLE   = 'sonnica_users';
    const NS      = 'sonnica/v1';

    public function __construct() {
        register_activation_hook(_FILE_, [$this, 'activate']);
        add_action('rest_api_init',        [$this, 'register_routes']);
    }

    /** Crear tabla auxiliar wp_sonnica_users */
    public function activate() {
        global $wpdb;
        $table = $wpdb->prefix . self::TABLE;
        $charset = $wpdb->get_charset_collate();
        $sql = "CREATE TABLE IF NOT EXISTS $table (
            id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
            user_id BIGINT UNSIGNED NOT NULL,
            email VARCHAR(190) NOT NULL,
            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY user_id (user_id),
            UNIQUE KEY email (email)
        ) $charset;";
        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);
    }

    public function register_routes() {
        // ping
        register_rest_route(self::NS, '/ping', [
            'methods'             => 'GET',
            'callback'            => [$this, 'ping'],
            'permission_callback' => '__return_true',
        ]);

        // register
        register_rest_route(self::NS, '/register', [
            'methods'             => 'POST',
            'callback'            => [$this, 'register_user'],
            'permission_callback' => '__return_true',
            'args'                => [
                'email'    => ['required' => true],
                'password' => ['required' => true],
                'name'     => ['required' => false],
                'redirect' => ['required' => false],
            ],
        ]);

        // login
        register_rest_route(self::NS, '/login', [
            'methods'             => 'POST',
            'callback'            => [$this, 'login_user'],
            'permission_callback' => '__return_true',
            'args'                => [
                'email'    => ['required' => true],
                'password' => ['required' => true],
                'redirect' => ['required' => false],
            ],
        ]);

        // guest
        register_rest_route(self::NS, '/guest', [
            'methods'             => 'POST',
            'callback'            => [$this, 'guest_login'],
            'permission_callback' => '__return_true',
            'args'                => [
                'redirect' => ['required' => false],
            ],
        ]);

        // logout
        register_rest_route(self::NS, '/logout', [
            'methods'             => 'POST',
            'callback'            => [$this, 'logout_user'],
            'permission_callback' => '__return_true',
        ]);
    }

    /** GET /ping */
    public function ping(WP_REST_Request $req) {
        return new WP_REST_Response([
            'ok'      => true,
            'message' => 'pong',
            'user'    => is_user_logged_in() ? wp_get_current_user()->user_email : null,
        ], 200);
    }

    /** POST /register */
    public function register_user(WP_REST_Request $req) {
        $email    = sanitize_email($req->get_param('email'));
        $password = (string) $req->get_param('password');
        $name     = sanitize_text_field($req->get_param('name'));
        $redirect = esc_url_raw($req->get_param('redirect'));

        if (!is_email($email)) {
            return new WP_Error('invalid_email', 'Correo inválido.', ['status' => 422]);
        }
        if (email_exists($email) || username_exists($email)) {
            return new WP_Error('email_exists', 'El correo ya está registrado.', ['status' => 409]);
        }
        if (strlen($password) < 6) {
            return new WP_Error('weak_password', 'La contraseña debe tener al menos 6 caracteres.', ['status' => 422]);
        }

        $user_id = wp_create_user($email, $password, $email);
        if (is_wp_error($user_id)) {
            return new WP_Error('register_failed', $user_id->get_error_message(), ['status' => 500]);
        }
        if ($name) {
            wp_update_user(['ID' => $user_id, 'display_name' => $name, 'first_name' => $name]);
        }

        // Tabla espejo
        global $wpdb;
        $wpdb->insert($wpdb->prefix . self::TABLE, [
            'user_id' => $user_id,
            'email'   => $email,
        ]);

        // Autologin
        $this->login_by_id($user_id);

        return new WP_REST_Response([
            'ok'       => true,
            'user_id'  => $user_id,
            'email'    => $email,
            'redirect' => $redirect ?: home_url('/sonnica-especies/'),
        ], 201);
    }

    /** POST /login */
    public function login_user(WP_REST_Request $req) {
        $email    = sanitize_email($req->get_param('email'));
        $password = (string) $req->get_param('password');
        $redirect = esc_url_raw($req->get_param('redirect'));

        if (!is_email($email)) {
            return new WP_Error('invalid_email', 'Correo inválido.', ['status' => 422]);
        }

        $creds = [
            'user_login'    => $email,
            'user_password' => $password,
            'remember'      => true,
        ];
        $user = wp_signon($creds, is_ssl());
        if (is_wp_error($user)) {
            return new WP_Error('login_failed', 'Credenciales incorrectas.', ['status' => 401]);
        }

        wp_set_current_user($user->ID);
        wp_set_auth_cookie($user->ID, true);

        return new WP_REST_Response([
            'ok'       => true,
            'user_id'  => $user->ID,
            'email'    => $user->user_email,
            'redirect' => $redirect ?: home_url('/sonnica-especies/'),
        ], 200);
    }

    /** POST /guest  (crea o reutiliza un usuario invitado único por IP/hora) */
    public function guest_login(WP_REST_Request $req) {
        $redirect = esc_url_raw($req->get_param('redirect'));
        $email = 'guest_' . wp_generate_password(8, false) . '@example.local';
        $pass  = wp_generate_password(12, true);

        $user_id = wp_create_user($email, $pass, $email);
        if (is_wp_error($user_id)) {
            return new WP_Error('guest_failed', 'No se pudo crear el usuario invitado.', ['status' => 500]);
        }
        wp_update_user(['ID' => $user_id, 'display_name' => 'Invitado']);

        global $wpdb;
        $wpdb->insert($wpdb->prefix . self::TABLE, [
            'user_id' => $user_id,
            'email'   => $email,
        ]);

        $this->login_by_id($user_id);

        return new WP_REST_Response([
            'ok'       => true,
            'guest'    => true,
            'user_id'  => $user_id,
            'email'    => $email,
            'redirect' => $redirect ?: home_url('/sonnica-especies/'),
        ], 201);
    }

    /** POST /logout */
    public function logout_user(WP_REST_Request $req) {
        wp_logout();
        return new WP_REST_Response(['ok' => true, 'message' => 'Sesión cerrada.'], 200);
    }

    /** Helper: iniciar sesión por ID */
    private function login_by_id($user_id) {
        wp_set_current_user($user_id);
        wp_set_auth_cookie($user_id, true);
    }
}

new SonNica_Register_API();
